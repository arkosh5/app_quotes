{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohammed\\\\Desktop\\\\Qoutes\\\\quotes-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport \"./App.css\";\nimport languages from \"./languages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Initialize state with default values\n    this.state = {\n      quotes: [],\n      // empty array to hold fetched quotes\n      quote: \"\",\n      // current quote to display\n      author: \"\",\n      // author of current quote\n      isLoading: false,\n      language: \"en\",\n      // set default language to \"en\"\n      searchTerm: \"\" // search term entered by user\n    };\n    // Bind methods to this\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.handleLanguageChange = this.handleLanguageChange.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n  componentDidMount() {\n    // Fetch quotes from API when component mounts\n    this.fetchQuotes();\n  }\n  fetchQuotes() {\n    // Set loading state to true\n    this.setState({\n      isLoading: true\n    });\n    // Fetch quotes from API\n    fetch(\"https://api.quotable.io/quotes?limit=50\").then(response => response.json()).then(data => {\n      // Update state with fetched quotes data\n      this.setState({\n        quotes: data.results,\n        isLoading: false\n      });\n    }).catch(error => {\n      // Handle error\n      console.error(error);\n    });\n  }\n  getNewQuote() {\n    // If user has entered a search term, get a random quote that matches the search term\n    if (this.state.searchTerm) {\n      const matchingQuotes = this.state.quotes.filter(quote => {\n        return quote.content.toLowerCase().includes(this.state.searchTerm.toLowerCase()) || quote.author.toLowerCase().includes(this.state.searchTerm.toLowerCase());\n      });\n      if (matchingQuotes.length > 0) {\n        const randomIndex = Math.floor(Math.random() * matchingQuotes.length);\n        this.setState({\n          quote: matchingQuotes[randomIndex].content,\n          author: matchingQuotes[randomIndex].author\n        });\n      }\n    }\n    // Otherwise, get a random quote from all quotes\n    else {\n      const randomIndex = Math.floor(Math.random() * this.state.quotes.length);\n      this.setState({\n        quote: this.state.quotes[randomIndex].content,\n        author: this.state.quotes[randomIndex].author\n      });\n    }\n  }\n  handleLanguageChange(e) {\n    // Update state with new language\n    this.setState({\n      language: e.target.value\n    });\n  }\n  handleSearchChange(e) {\n    // Update state with new search term\n    this.setState({\n      searchTerm: e.target.value\n    });\n  }\n  render() {\n    var _filteredQuotes$, _filteredQuotes$2;\n    const {\n      appTitle,\n      newQuoteBtn,\n      tweetBtn,\n      tumblrBtn,\n      facebookBtn,\n      searchPlaceholder\n    } = languages[this.state.language];\n\n    // Filter quotes based on search term\n    const filteredQuotes = this.state.quotes.filter(quote => {\n      return quote.content.toLowerCase().includes(this.state.searchTerm.toLowerCase()) || quote.author.toLowerCase().includes(this.state.searchTerm.toLowerCase());\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: appTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: this.handleLanguageChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"en\",\n          children: \"English\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"es\",\n          children: \"Espa\\xF1ol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ar\",\n          children: \"\\u0627\\u0644\\u0639\\u0631\\u0628\\u064A\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: searchPlaceholder,\n        value: this.state.searchTerm,\n        onChange: this.handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuoteBox, {\n        quote: (_filteredQuotes$ = filteredQuotes[0]) === null || _filteredQuotes$ === void 0 ? void 0 : _filteredQuotes$.content,\n        author: (_filteredQuotes$2 = filteredQuotes[0]) === null || _filteredQuotes$2 === void 0 ? void 0 : _filteredQuotes$2.author,\n        isLoading: this.state.isLoading,\n        getNewQuote: this.getNewQuote,\n        newQuoteBtn: newQuoteBtn,\n        tweetBtn: tweetBtn,\n        tumblrBtn: tumblrBtn,\n        facebookBtn: facebookBtn,\n        searchPlaceholder: searchPlaceholder,\n        language: this.state.language\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","QuoteBox","languages","jsxDEV","_jsxDEV","App","Component","constructor","props","state","quotes","quote","author","isLoading","language","searchTerm","getNewQuote","bind","handleLanguageChange","handleSearchChange","componentDidMount","fetchQuotes","setState","fetch","then","response","json","data","results","catch","error","console","matchingQuotes","filter","content","toLowerCase","includes","length","randomIndex","Math","floor","random","e","target","value","render","_filteredQuotes$","_filteredQuotes$2","appTitle","newQuoteBtn","tweetBtn","tumblrBtn","facebookBtn","searchPlaceholder","filteredQuotes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","placeholder"],"sources":["C:/Users/Mohammed/Desktop/Qoutes/quotes-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport \"./App.css\";\nimport languages from \"./languages\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        // Initialize state with default values\n        this.state = {\n            quotes: [], // empty array to hold fetched quotes\n            quote: \"\", // current quote to display\n            author: \"\", // author of current quote\n            isLoading: false,\n            language: \"en\", // set default language to \"en\"\n            searchTerm: \"\", // search term entered by user\n        };\n        // Bind methods to this\n        this.getNewQuote = this.getNewQuote.bind(this);\n        this.handleLanguageChange = this.handleLanguageChange.bind(this);\n        this.handleSearchChange = this.handleSearchChange.bind(this);\n    }\n\n    componentDidMount() {\n        // Fetch quotes from API when component mounts\n        this.fetchQuotes();\n    }\n\n    fetchQuotes() {\n        // Set loading state to true\n        this.setState({\n            isLoading: true,\n        });\n        // Fetch quotes from API\n        fetch(\"https://api.quotable.io/quotes?limit=50\")\n            .then((response) => response.json())\n            .then((data) => {\n                // Update state with fetched quotes data\n                this.setState({\n                    quotes: data.results,\n                    isLoading: false,\n                });\n            })\n            .catch((error) => {\n                // Handle error\n                console.error(error);\n            });\n    }\n\n    getNewQuote() {\n        // If user has entered a search term, get a random quote that matches the search term\n        if (this.state.searchTerm) {\n            const matchingQuotes = this.state.quotes.filter((quote) => {\n                return (\n                    quote.content.toLowerCase().includes(this.state.searchTerm.toLowerCase()) ||\n                    quote.author.toLowerCase().includes(this.state.searchTerm.toLowerCase())\n                );\n            });\n            if (matchingQuotes.length > 0) {\n                const randomIndex = Math.floor(Math.random() * matchingQuotes.length);\n                this.setState({\n                    quote: matchingQuotes[randomIndex].content,\n                    author: matchingQuotes[randomIndex].author,\n                });\n            }\n        }\n        // Otherwise, get a random quote from all quotes\n        else {\n            const randomIndex = Math.floor(Math.random() * this.state.quotes.length);\n            this.setState({\n                quote: this.state.quotes[randomIndex].content,\n                author: this.state.quotes[randomIndex].author,\n            });\n        }\n    }\n\n    handleLanguageChange(e) {\n        // Update state with new language\n        this.setState({\n            language: e.target.value,\n        });\n    }\n\n    handleSearchChange(e) {\n        // Update state with new search term\n        this.setState({\n            searchTerm: e.target.value,\n        });\n    }\n\n    render() {\n        const {\n            appTitle,\n            newQuoteBtn,\n            tweetBtn,\n            tumblrBtn,\n            facebookBtn,\n            searchPlaceholder\n        } = languages[this.state.language];\n\n        // Filter quotes based on search term\n        const filteredQuotes = this.state.quotes.filter((quote) => {\n            return (\n                quote.content.toLowerCase().includes(this.state.searchTerm.toLowerCase()) ||\n                quote.author.toLowerCase().includes(this.state.searchTerm.toLowerCase())\n            );\n        });\n\n        return (\n            <div className=\"App\">\n                <h1>{appTitle}</h1>\n                {/* Add language switcher */}\n                <select onChange={this.handleLanguageChange}>\n                    <option value=\"en\">English</option>\n                    <option value=\"es\">Español</option>\n                    <option value=\"ar\">العربية</option>\n                </select>\n                {/* Add search input */}\n                <input\n                    type=\"text\"\n                    placeholder={searchPlaceholder}\n                    value={this.state.searchTerm}\n                    onChange={this.handleSearchChange}\n                />\n                {/* Pass state values as props to QuoteBox */}\n                <QuoteBox\n                    quote={filteredQuotes[0]?.content}\n                    author={filteredQuotes[0]?.author}\n                    isLoading={this.state.isLoading}\n                    getNewQuote={this.getNewQuote}\n                    newQuoteBtn={newQuoteBtn}\n                    tweetBtn={tweetBtn}\n                    tumblrBtn={tumblrBtn}\n                    facebookBtn={facebookBtn}\n                    searchPlaceholder={searchPlaceholder}\n                    language={this.state.language}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}