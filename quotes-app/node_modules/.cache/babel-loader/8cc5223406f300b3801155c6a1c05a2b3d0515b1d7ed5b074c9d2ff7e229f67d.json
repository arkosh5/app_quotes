{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohammed\\\\Desktop\\\\Qoutes\\\\quotes-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport \"./App.css\";\nimport languages from \"./languages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Initialize state with default values\n    this.state = {\n      quote: \"Don't cry because it's over, smile because it happened.\",\n      author: \"Dr. Seuss\",\n      isLoading: false,\n      language: \"en\" // set default language to \"en\"\n    };\n    // Bind methods to this\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.handleLanguageChange = this.handleLanguageChange.bind(this);\n  }\n  componentDidMount() {\n    // Get a new quote when component mounts\n    this.getNewQuote();\n  }\n  getNewQuote() {\n    // Set loading state to true\n    this.setState({\n      isLoading: true\n    });\n    // Fetch a new quote from API\n    fetch(\"https://api.quotable.io/random\").then(response => response.json()).then(data => {\n      // Update state with new quote data\n      this.setState({\n        quote: data.content,\n        author: data.author,\n        isLoading: false\n      });\n    }).catch(error => {\n      // Handle error\n      console.error(error);\n    });\n    // fetch a new quote from API for arabic language\n    fetch(\"https://api.quotable.io/random?tags=arabic\").then(response => response.json()).then(data => {\n      // Update state with new quote data\n      this.setState({\n        quote: data.content,\n        isLoading: false\n      });\n    }).catch(error => {\n      // Handle error\n      console.error(error);\n    });\n  }\n  handleLanguageChange(e) {\n    // Update state with new language\n    this.setState({\n      language: e.target.value\n    });\n  }\n  render() {\n    const {\n      appTitle,\n      newQuoteBtn,\n      tweetBtn,\n      tumblrBtn,\n      facebookBtn,\n      searchPlaceholder\n    } = languages[this.state.language];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: appTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: this.handleLanguageChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"en\",\n          children: \"English\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"es\",\n          children: \"Espa\\xF1ol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ar\",\n          children: \"\\u0627\\u0644\\u0639\\u0631\\u0628\\u064A\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QuoteBox, {\n        quote: this.state.quote,\n        author: this.state.author,\n        isLoading: this.state.isLoading,\n        getNewQuote: this.getNewQuote,\n        newQuoteBtn: newQuoteBtn,\n        tweetBtn: tweetBtn,\n        tumblrBtn: tumblrBtn,\n        facebookBtn: facebookBtn,\n        searchPlaceholder: searchPlaceholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","QuoteBox","languages","jsxDEV","_jsxDEV","App","Component","constructor","props","state","quote","author","isLoading","language","getNewQuote","bind","handleLanguageChange","componentDidMount","setState","fetch","then","response","json","data","content","catch","error","console","e","target","value","render","appTitle","newQuoteBtn","tweetBtn","tumblrBtn","facebookBtn","searchPlaceholder","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange"],"sources":["C:/Users/Mohammed/Desktop/Qoutes/quotes-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport \"./App.css\";\nimport languages from \"./languages\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Initialize state with default values\n    this.state = {\n      quote: \"Don't cry because it's over, smile because it happened.\",\n      author: \"Dr. Seuss\",\n      isLoading: false,\n      language: \"en\", // set default language to \"en\"\n    };\n    // Bind methods to this\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.handleLanguageChange = this.handleLanguageChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Get a new quote when component mounts\n    this.getNewQuote();\n  }\n\n  getNewQuote() {\n    // Set loading state to true\n    this.setState({\n      isLoading: true,\n    });\n    // Fetch a new quote from API\n    fetch(\"https://api.quotable.io/random\")\n      .then((response) => response.json())\n      .then((data) => {\n        // Update state with new quote data\n        this.setState({\n          quote: data.content,\n          author: data.author,\n          isLoading: false,\n        });\n      })\n      .catch((error) => {\n        // Handle error\n        console.error(error);\n      });\n    // fetch a new quote from API for arabic language\n    fetch(\"https://api.quotable.io/random?tags=arabic\")\n        .then((response) => response.json())\n        .then((data) => {\n            // Update state with new quote data\n            this.setState({\n                quote: data.content,\n\n                isLoading: false,\n            });\n        })\n        .catch((error) => {\n            // Handle error\n            console.error(error);\n        });\n    }\n\n  handleLanguageChange(e) {\n    // Update state with new language\n    this.setState({\n      language: e.target.value,\n    });\n  }\n\n  render() {\n    const { appTitle, newQuoteBtn, tweetBtn, tumblrBtn, facebookBtn, searchPlaceholder } = languages[this.state.language];\n\n    return (\n      <div className=\"App\">\n        <h1>{appTitle}</h1>\n        {/* Add language switcher */}\n        <select onChange={this.handleLanguageChange}>\n          <option value=\"en\">English</option>\n          <option value=\"es\">Español</option>\n            <option value=\"ar\">العربية</option>\n        </select>\n        {/* Pass state values as props to QuoteBox */}\n        <QuoteBox\n          quote={this.state.quote}\n          author={this.state.author}\n          isLoading={this.state.isLoading}\n          getNewQuote={this.getNewQuote}\n          newQuoteBtn={newQuoteBtn}\n          tweetBtn={tweetBtn}\n          tumblrBtn={tumblrBtn}\n          facebookBtn={facebookBtn}\n            searchPlaceholder={searchPlaceholder}\n        />\n        </div>\n    );\n    }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}